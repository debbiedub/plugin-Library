<?xml version="1.0"?>
<!-- ant build file for Freenet -->

<project name="plugins-Library" default="dist" basedir=".">
	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="fcp.location" location="../no-infocalypse/lib-jFCPLib/classes"/>

	<property name="source-version" value="1.6"/>
	<property name="target-version" value="1.6"/>

	<property name="build" location="build"/>
	<property name="build-shared" location="${build}/shared"/>
	<property name="build-uploader" location="${build}/uploader"/>
	<property name="build-plugin" location="${build}/plugin"/>

	<property name="build-test" location="build-test"/>
	<property name="build-test-shared" location="${build-test}/shared"/>
	<property name="build-test-uploader" location="${build-test}/uploader"/>
	<property name="build-test-plugin" location="${build-test}/plugin"/>

	<property name="run-test" location="${build-test}/run"/>

	<property name="tmp" location="tmp/"/>
	<property name="dist" location="dist/"/>
	<property name="javadoc" location="javadoc/"/>
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="packagebase" value="plugins.Library" />
	<property name="minNodeVersion" value="1464"/>

	<property name="version.src" value="plugins/Library/Version.java" />
	<property name="version.build" value="plugins/Library/Version.class" />
	<available file="src/${version.src}" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>

	<path id="shared.path">
		<fileset dir="lib/">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="plugin.path">
		<pathelement location="${freenet-ext.location}"/>
		<pathelement location="${freenet-cvs-snapshot.location}"/>
		<path refid="shared.path"/>
		<pathelement location="${build-shared}"/>
	</path>

	<path id="uploader.path">
		<path refid="shared.path"/>
		<pathelement location="${build-shared}"/>
		<pathelement location="${fcp.location}"/>
	</path>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
	</exec>
	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<!-- ================================================== -->
	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-shared}"/>
		<mkdir dir="${build-uploader}"/>
		<mkdir dir="${build-plugin}"/>
		<mkdir dir="${dist}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
	</target>

	<!-- ================================================== -->
	<target name="build-dep">
		<mkdir dir="lib/"/>
		<mkdir dir="${tmp}"/>
		<ant target="SnakeYAML-get"/>
		<!--<ant target="KeyExplorer-get"/>-->
		<delete dir="${tmp}"/>
	</target>

	<property name="SnakeYAML.mirror" value="https://downloads.freenetproject.org/snakeyaml-1.5.jar" />
	<property name="SnakeYAML.md5" value="1788db5d529a981b090632b8e49b8cd2" />
	<property name="SnakeYAML.sha" value="a3654035d0b68db775034afa5425a62250de8184" />
	<available property="SnakeYAML.exist" classname="org.yaml.snakeyaml.Yaml" classpathref="shared.path"/>
	<target name="SnakeYAML-get" unless="SnakeYAML.exist">
		<get verbose="true" src="${SnakeYAML.mirror}" dest="${tmp}/snakeyaml-1.5.jar" />
		<checksum file="${tmp}/snakeyaml-1.5.jar" algorithm="MD5" property="${SnakeYAML.md5}" verifyProperty="SnakeYAMLMD5ok" />
		<checksum file="${tmp}/snakeyaml-1.5.jar" algorithm="SHA" property="${SnakeYAML.sha}" verifyProperty="SnakeYAMLSHAok" />
		<fail message="SnakeYAML.zip checksum mismatch">
			<condition>
				<or>
					<equals arg1="${SnakeYAMLMD5ok}" arg2="false" />
					<equals arg1="${SnakeYAMLSHAok}" arg2="false" />
				</or>
			</condition>
		</fail>
		<move file="${tmp}/snakeyaml-1.5.jar" todir="lib/" />
	</target>

	<!-- ================================================== -->
	<target name="setver" if="version.present">
		<!-- Update the Version.java file in ${build}-->
		<copy file="src/${version.src}" tofile="${build-plugin}/${version.src}" overwrite="true" />
		<delete file="${build-plugin}/${version.build}"/>
		<replace file="${build-plugin}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="mkdir,build-dep,setver">
		<tstamp/>

		<javac srcdir="shared/src/" destdir="${build-shared}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<path refid="shared.path"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/package-info.java"/>
		</javac>

		<javac srcdir="${build-plugin}" destdir="${build-plugin}" debug="on" optimize="on" source="1.5" target="1.5">
			<include name="${version.src}"/>
		</javac>

		<javac srcdir="src/" destdir="${build-plugin}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<!--<compilerarg value="-Xlint"/>-->
			<sourcepath>
				<pathelement location="${build-plugin}"/>
			</sourcepath>
			<classpath>
				<path refid="plugin.path"/>
				<pathelement location="${build-plugin}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/package-info.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<javac srcdir="uploader/src/" destdir="${build-uploader}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<path refid="uploader.path"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/package-info.java"/>
		</javac>

		<!-- Copy web interface static files to the build dir -->
		<copy todir="${build}/plugins/Library/ui/staticfiles">
			<fileset dir="src/plugins/Library/ui/staticfiles"/>
		</copy>
		<assertions><enable/></assertions>
	</target>

	<!-- ================================================== -->
	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<delete dir="${build-test}"/>

		<mkdir dir="${build-test-shared}"/>
		<javac srcdir="shared/test/" destdir="${build-test-shared}" debug="on" optimize="on" source="1.5">
			<classpath>
				<path refid="shared.path"/>
				<pathelement path="${build-shared}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>

		<mkdir dir="${build-test-plugin}"/>
		<javac srcdir="test/" destdir="${build-test-plugin}" debug="on" optimize="on" source="1.5">
			<classpath>
				<path refid="plugin.path"/>
				<pathelement path="${build-plugin}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
		<!-- uploader -->
	</target>

	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<delete dir="${run-test}"/>
		<mkdir dir="${run-test}"/>

		<junit printsummary="yes" fork="yes" haltonfailure="yes"
		       dir="${run-test}" showoutput="yes">
			<classpath>
				<path refid="shared.path"/>
				<pathelement path="${build-shared}"/>
				<pathelement path="${build-test-shared}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${build-test-shared}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>

		<junit printsummary="yes" fork="yes" haltonfailure="yes"
		       dir="${run-test}" showoutput="yes">
			<classpath>
				<path refid="shared.path"/>
				<pathelement path="${build-shared}"/>
				<pathelement path="${build-plugin}"/>
				<pathelement path="${build-test-plugin}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${build-test-plugin}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>

	</target>

	<!-- ================================================== -->
	<target name="jar" depends="compile,junit"
		description="create jar packages">
		<jar jarfile="${dist}/Library.jar" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="${packagebase}.ui.TestInterface"/>
				<attribute name="Plugin-Main-Class" value="${packagebase}.Main"/>
				<attribute name="Required-Node-Version" value="${minNodeVersion}"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="**/*.txt"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${build-shared}"/>
			<fileset dir="${build-plugin}/">
				<exclude name="${version.src}"/>
			</fileset>
			<zipgroupfileset dir="lib/" includes="**/*.jar"/>
		</jar>

		<jar jarfile="${dist}/uploader.jar" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="freenet.library.uploader.Merger"/>
				<attribute name="Required-Node-Version" value="${minNodeVersion}"/>
			</manifest>
			<fileset dir="${build-shared}"/>
			<fileset dir="${build-uploader}"/>
			<zipgroupfileset dir="lib/" includes="**/*.jar"/>
			<fileset dir="${fcp.location}"/>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="javadoc" description="generate javadocs" depends="build-dep">
		<delete dir="${javadoc}"/>
		<javadoc classpathref="shared.path" destdir="${javadoc}" author="true" version="true" use="true" private="true">
			<doclet name="info.bliki.doclet.standard.Standard" path="doc/bliki-doclet.jar"/>
			<!--<doclet name="com.visural.doclets.markdown.standard.Standard" path="doc/MarkdownDoclet.jar"/>-->
			<fileset dir="src/" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
			<link href="http://freenet.github.com/fred-staging/api"/>
			<link href="http://snakeyamlrepo.appspot.com/releases/1.5/site/apidocs"/>
		</javadoc>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,jar" description="generate the distribution from scratch">
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

</project>
